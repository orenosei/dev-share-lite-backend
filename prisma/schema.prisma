generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique @db.VarChar(50)
  email     String    @unique @db.VarChar(100)
  password  String    @db.VarChar(255)
  firstName String?   @db.VarChar(50)
  lastName  String?   @db.VarChar(50)
  bio       String?   @db.Text
  avatarUrl String?   @db.VarChar(255)
  phone     String?   @db.VarChar(20)
  address   Json?     @db.Json
  createdAt DateTime  @default(now()) 
  updatedAt DateTime  @updatedAt 
  
  posts         Post[]
  comments      Comment[]
  postLikes     PostLike[]
  commentLikes  CommentLike[]
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(255)
  content   String
  status    PostStatus @default(DRAFT)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userId    Int       
  user      User      @relation(fields: [userId], references: [id])
  tags      Tag[]     
  comments  Comment[]
  likes     PostLike[]
  images    PostImage[]
  

  @@index([userId])
  @@index([createdAt])
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(50)
  
  posts     Post[]   
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())

  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  postId    Int
  post      Post      @relation(fields: [postId], references: [id])
  parentId  Int?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  likes     CommentLike[]
  
  @@index([userId])
  @@index([postId])
  @@index([parentId])
  @@index([createdAt])
}


model PostLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId], name: "user_post_unique")
  @@index([postId])
  @@index([createdAt])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, commentId], name: "user_comment_unique")
  @@index([commentId])
  @@index([createdAt])
}

model PostImage {
  id        Int      @id @default(autoincrement())
  url       String   @db.VarChar(500)  // Cloudinary URL
  publicId  String   @db.VarChar(255)  // Cloudinary public_id for deletion
  createdAt DateTime @default(now())

  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}